
name: Build, analyze an release

on:
    push:
      branches: [ "release/**" ]
    pull_request:
      branches: [ "release/**" ]
  
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    - name: Build
      run: go build -v ./...
    - name: Test
      run: go test -v -coverprofile='coverage.out' -json ./... > report.json
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  release-tag:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: create release tag
        run: |
          VERSION_NAME=$(echo "${GITHUB_REF_NAME}" | grep -oP '(?<=release/).*')

          RELEASE_TAG=$(
            curl -s -S -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.UPLOAD_GITHUB_PAT }}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
            -d "{\"tag_name\":\"v${VERSION_NAME}\",\"target_commitish\":\"${GITHUB_REF_NAME}\",\"name\":\"v${VERSION_NAME}\",\"body\":\"Workflow based created release on branch ${GITHUB_REF_NAME}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false}"
          )

          RELEASE_ID=$(echo "${RELEASE_TAG}" | grep -oPm1 '(?<="id": ).*(?=,)')
          if [ -z ${RELEASE_ID} ] ; 
          then
            RELEASE_ID=$(echo "${RELEASE_TAG}" | grep -oPm1 '(?<="id":)\d*(?=,)' | head -n1 )
          fi

          echo "Release created with Id ${RELEASE_ID}"

  release-binary-assets:
    needs: release-tag
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        goOs: [linux, windows]
        goArch: [amd64, arm64]
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Build ${{ matrix.goOs }}-${{ matrix.goArch }}
        run: |
          VERSION_NAME=$(echo "${GITHUB_REF_NAME}" | grep -oP '(?<=release/).*')
          go build -ldflags "-X main.version=${VERSION_NAME} -X main.gitSha=${GITHUB_SHA} -X main.branchName=${GITHUB_REF_NAME}" -o ${FILE_NAME}
        env:
          GOOS: ${{ matrix.goOs }}
          GOARCH: ${{ matrix.goArch }}
          FILE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}${{ matrix.goOs == 'windows' && '.exe' || '' }}
      - name: generate hash
        run: | 
          SHA256_VALUE=$(sha256sum ${BINARY_FILE_NAME})
          SHA512_VALUE=$(sha512sum ${BINARY_FILE_NAME})
          echo "CheckSum sha256: ${SHA256_VALUE}"
          echo "CheckSum sha512: ${SHA512_VALUE}"
          echo "sha256: ${SHA256_VALUE}" >> ${HASH_FILE_NAME}
          echo "sha512: ${SHA512_VALUE}" >> ${HASH_FILE_NAME}
        env:
          BINARY_FILE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}${{ matrix.goOs == 'windows' && '.exe' || '' }}
          HASH_FILE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}-hash.txt
      - name: zip app binary
        run: zip ${ARCHIVE_NAME} ${BINARY_FILE_NAME} ${HASH_FILE_NAME}
        env:
          BINARY_FILE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}${{ matrix.goOs == 'windows' && '.exe' || '' }}
          HASH_FILE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}-hash.txt
          ARCHIVE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}.zip
      - name: Upload asset
        run: |
          VERSION_NAME=$(echo "${GITHUB_REF_NAME}" | grep -oP '(?<=release/).*')

          RELEASE_TAG=$(
            curl -s -S -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.UPLOAD_GITHUB_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${VERSION_NAME}
          )

          RELEASE_ID=$(echo "${RELEASE_TAG}" | grep -oPm1 '(?<="id": ).*(?=,)')
          if [ -z ${RELEASE_ID} ] ; 
          then
            RELEASE_ID=$(echo "${RELEASE_TAG}" | grep -oPm1 '(?<="id":)\d*(?=,)' | head -n1 )
          fi

          echo "upload to release with id ${RELEASE_ID}"

          ASSET_UPLOAD=$(
            curl -v -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.UPLOAD_GITHUB_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ARCHIVE_NAME}" \
            --data-binary "@${ARCHIVE_NAME}"
          )

          ASSET_ID=$(echo "${ASSET_UPLOAD}" | grep -oPm1 '(?<="id": ).*(?=,)')
          if [ -z ${ASSET_ID} ] ; 
          then
              ASSET_ID=$(echo "${ASSET_UPLOAD}" | grep -oPm1 '(?<="id":)\d*(?=,)' | head -n1 )
          fi

          echo "Asset uploaded with Id ${ASSET_ID}"

        env:
          ARCHIVE_NAME: packages-action-${{ matrix.goOs }}-${{ matrix.goArch }}.zip